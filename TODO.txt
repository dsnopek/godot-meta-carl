TODO
====

Phase I: Get something working
---

- Implement `CARLRecorder` and `CARLRecording`
  - Rethink CARLInputSample:
    - Perhaps it isn't a `Resource` with a persistent `carl::InputSample` but instead just a `RefCounted` that we can convert to/from a `carl::InputSample`
    - We don't need to be able to get the original input samples out, only inspect recordings
    - Also, we're passing `carl::InputSample`s into the session to be processed by the recognizer
    - Besides, storing the `CARLInputSample` as a .tres is hugely wasteful - having full recordings as binary data is better
    - We also should have a way to bypass `CARLInputSample` when recording, since in most cases, we're just reading the trackers
- Demo: Allow recording and playing back in demo
  - Should allow selecting which poses are enabled
- Implement `CARLExample`
- Demo: Allow cropping and saving examples in demo
  - Should be as simple as possible: maybe just scrub through recording and press button for "start" / "stop"
  - Or, can we get away without cropping them for testing purposes? Maybe just record the right hand?
- Implement `CARLDefinition`, `CARLSession`, `CARLRecognizer`
- Demo: Test recognizing a definition in the demo
  - This should be the simplest hack to make it work!
  - We need to know that our data is even any good, and that the library even remotely works
- At this point, let's merge `carl-slush` into `main`

Phase II: Proper tooling for development
---

- Demo: Implement "nice" UI for constructing and testing examples
  - This should be the real deal!
  - We want a simple "studio" for creating, testing and editing definitions
